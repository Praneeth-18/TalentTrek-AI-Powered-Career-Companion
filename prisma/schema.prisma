generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                  @id @default(uuid()) @db.VarChar(255)
  email                 String?                 @unique
  name                  String?
  createdAt             DateTime?               @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime?               @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  user_job_interactions user_job_interactions[]

  @@map("users")
}

model JobListing {
  id                    Int                     @id @default(autoincrement())
  positionTitle         String                  @map("position_title")
  postingDate           DateTime                @map("posting_date")
  applyLink             String?                 @map("apply_link")
  workModel             String?                 @map("work_model")
  location              String?
  company               String
  companySize           String?                 @map("company_size")
  companyIndustry       String?                 @map("company_industry")
  salary                String?
  qualifications        String?
  h1bSponsored          Boolean                 @default(false) @map("h1b_sponsored")
  isNewGrad             Boolean                 @default(false) @map("is_new_grad")
  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")
  lastSeenAt            DateTime                @default(now()) @map("last_seen_at")
  isActive              Boolean                 @default(true) @map("is_active")
  contentHash           String                  @map("content_hash")
  jobCategory           String?                 @map("job_category")
  actual_apply_link     String?
  job_embeddings        job_embeddings?
  applications          UserApplication[]
  user_job_interactions user_job_interactions[]

  @@map("job_listings")
}

model UserApplication {
  id            Int                        @id @default(autoincrement())
  jobListingId  Int                        @map("job_listing_id")
  userId        String                     @map("user_id") @db.VarChar(255)
  currentStatus String                     @default("Applied") @map("current_status")
  appliedAt     DateTime                   @default(now()) @map("applied_at")
  updatedAt     DateTime                   @updatedAt @map("updated_at")
  notes         String?
  statusHistory ApplicationStatusHistory[]
  jobListing    JobListing                 @relation(fields: [jobListingId], references: [id])

  @@unique([jobListingId, userId])
  @@index([userId], map: "idx_user_applications_user_id")
  @@map("user_applications")
}

model ApplicationStatusHistory {
  id                Int             @id @default(autoincrement())
  userApplicationId Int             @map("user_application_id")
  status            String
  changedAt         DateTime        @default(now()) @map("changed_at")
  notes             String?
  userApplication   UserApplication @relation(fields: [userApplicationId], references: [id])

  @@map("application_status_history")
}

model csv_processing_history {
  id              Int       @id @default(autoincrement())
  filename        String    @db.VarChar(255)
  processed_count Int?
  inserted_count  Int?
  updated_count   Int?
  processed_at    DateTime? @default(now()) @db.Timestamp(6)
}

model job_embeddings {
  job_id                Int                    @id
  embedding             Unsupported("vector")?
  responsibilities_text String?
  updated_at            DateTime?              @default(now()) @db.Timestamp(6)
  job_listings          JobListing             @relation(fields: [job_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user_job_interactions {
  id               Int        @id @default(autoincrement())
  user_id          String     @db.VarChar(255)
  job_listing_id   Int
  interaction_type String     @db.VarChar(50)
  created_at       DateTime   @default(now()) @db.Timestamp(6)
  updated_at       DateTime   @default(now()) @db.Timestamp(6)
  job_listings     JobListing @relation(fields: [job_listing_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_job_listing_id")
  users            User       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_id")

  @@unique([user_id, job_listing_id, interaction_type], map: "unique_user_job_interaction")
  @@index([job_listing_id], map: "idx_user_job_interactions_job_listing_id")
  @@index([interaction_type], map: "idx_user_job_interactions_type")
  @@index([user_id], map: "idx_user_job_interactions_user_id")
}
